// Code generated by protoc-gen-go.
// source: codec.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AudioFileMetadataRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *AudioFileMetadataRequest) Reset()                    { *m = AudioFileMetadataRequest{} }
func (m *AudioFileMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*AudioFileMetadataRequest) ProtoMessage()               {}
func (*AudioFileMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type AudioFileMetadataResponse struct {
	SampleRate int32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	Length     int64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (m *AudioFileMetadataResponse) Reset()                    { *m = AudioFileMetadataResponse{} }
func (m *AudioFileMetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*AudioFileMetadataResponse) ProtoMessage()               {}
func (*AudioFileMetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type DecodeAudioFileRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *DecodeAudioFileRequest) Reset()                    { *m = DecodeAudioFileRequest{} }
func (m *DecodeAudioFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DecodeAudioFileRequest) ProtoMessage()               {}
func (*DecodeAudioFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type DecodeAudioFileResponse struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *DecodeAudioFileResponse) Reset()                    { *m = DecodeAudioFileResponse{} }
func (m *DecodeAudioFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DecodeAudioFileResponse) ProtoMessage()               {}
func (*DecodeAudioFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*AudioFileMetadataRequest)(nil), "pb.AudioFileMetadataRequest")
	proto.RegisterType((*AudioFileMetadataResponse)(nil), "pb.AudioFileMetadataResponse")
	proto.RegisterType((*DecodeAudioFileRequest)(nil), "pb.DecodeAudioFileRequest")
	proto.RegisterType((*DecodeAudioFileResponse)(nil), "pb.DecodeAudioFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Codec service

type CodecClient interface {
	AudioFileMetadata(ctx context.Context, in *AudioFileMetadataRequest, opts ...grpc.CallOption) (*AudioFileMetadataResponse, error)
	DecodeAudioFile(ctx context.Context, in *DecodeAudioFileRequest, opts ...grpc.CallOption) (Codec_DecodeAudioFileClient, error)
}

type codecClient struct {
	cc *grpc.ClientConn
}

func NewCodecClient(cc *grpc.ClientConn) CodecClient {
	return &codecClient{cc}
}

func (c *codecClient) AudioFileMetadata(ctx context.Context, in *AudioFileMetadataRequest, opts ...grpc.CallOption) (*AudioFileMetadataResponse, error) {
	out := new(AudioFileMetadataResponse)
	err := grpc.Invoke(ctx, "/pb.Codec/AudioFileMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codecClient) DecodeAudioFile(ctx context.Context, in *DecodeAudioFileRequest, opts ...grpc.CallOption) (Codec_DecodeAudioFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Codec_serviceDesc.Streams[0], c.cc, "/pb.Codec/DecodeAudioFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &codecDecodeAudioFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Codec_DecodeAudioFileClient interface {
	Recv() (*DecodeAudioFileResponse, error)
	grpc.ClientStream
}

type codecDecodeAudioFileClient struct {
	grpc.ClientStream
}

func (x *codecDecodeAudioFileClient) Recv() (*DecodeAudioFileResponse, error) {
	m := new(DecodeAudioFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Codec service

type CodecServer interface {
	AudioFileMetadata(context.Context, *AudioFileMetadataRequest) (*AudioFileMetadataResponse, error)
	DecodeAudioFile(*DecodeAudioFileRequest, Codec_DecodeAudioFileServer) error
}

func RegisterCodecServer(s *grpc.Server, srv CodecServer) {
	s.RegisterService(&_Codec_serviceDesc, srv)
}

func _Codec_AudioFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServer).AudioFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Codec/AudioFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServer).AudioFileMetadata(ctx, req.(*AudioFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codec_DecodeAudioFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecodeAudioFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CodecServer).DecodeAudioFile(m, &codecDecodeAudioFileServer{stream})
}

type Codec_DecodeAudioFileServer interface {
	Send(*DecodeAudioFileResponse) error
	grpc.ServerStream
}

type codecDecodeAudioFileServer struct {
	grpc.ServerStream
}

func (x *codecDecodeAudioFileServer) Send(m *DecodeAudioFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Codec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Codec",
	HandlerType: (*CodecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AudioFileMetadata",
			Handler:    _Codec_AudioFileMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DecodeAudioFile",
			Handler:       _Codec_DecodeAudioFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("codec.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x4f, 0x49,
	0x4d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe3, 0x92, 0x70,
	0x2c, 0x4d, 0xc9, 0xcc, 0x77, 0xcb, 0xcc, 0x49, 0xf5, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49,
	0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x48, 0x2c, 0xc9, 0x90,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x42, 0xb8, 0x24, 0xb1, 0xa8, 0x2f, 0x2e,
	0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe7, 0xe2, 0x2e, 0x4e, 0xcc, 0x2d, 0xc8, 0x49, 0x8d, 0x2f,
	0x4a, 0x2c, 0x49, 0x05, 0xeb, 0x63, 0x0d, 0xe2, 0x82, 0x08, 0x05, 0x25, 0x96, 0xa4, 0x0a, 0x89,
	0x71, 0xb1, 0xe5, 0xa4, 0xe6, 0xa5, 0x97, 0x64, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x30, 0x07, 0x41,
	0x79, 0x4a, 0x3a, 0x5c, 0x62, 0x2e, 0xa9, 0x20, 0xa7, 0xc1, 0xcd, 0xc6, 0xe7, 0x06, 0x7d, 0x2e,
	0x71, 0x0c, 0xd5, 0x50, 0x17, 0x88, 0x70, 0xb1, 0x26, 0x67, 0x94, 0xe6, 0x65, 0x83, 0xd5, 0xf3,
	0x04, 0x41, 0x38, 0x46, 0xab, 0x19, 0xb9, 0x58, 0x9d, 0x41, 0x1e, 0x17, 0x0a, 0xe2, 0x12, 0xc4,
	0x70, 0xbe, 0x90, 0x8c, 0x5e, 0x41, 0x92, 0x1e, 0xae, 0x50, 0x90, 0x92, 0xc5, 0x21, 0x0b, 0xb1,
	0x51, 0x89, 0x41, 0xc8, 0x8f, 0x8b, 0x1f, 0xcd, 0x39, 0x42, 0x52, 0x20, 0x3d, 0xd8, 0x7d, 0x24,
	0x25, 0x8d, 0x55, 0x0e, 0x66, 0x9a, 0x01, 0x63, 0x12, 0x1b, 0x38, 0x76, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa3, 0xe2, 0x4d, 0x6b, 0xac, 0x01, 0x00, 0x00,
}
